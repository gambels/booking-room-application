@startuml

class BookingSystem {
  +BookingSystem(authentication: IAuthentication)
  
  +login(user: User, pass: Password) : Sessions
  +logout(Session) : Boolean

  +show_rooms(): Room[]
  +show_bookings(): Booking[]

  +book(session: Session, room: Room): Booking
  +cancel(session: Session, Booking): Boolean
  +edit(session: Session, Booking): Boolean
  
  -authentication: IAuthentication
  -sessions: Sessions
  -rooms: Rooms
  -bookings: Bookings
}
BookingSystem "1" o-- "1" IAuthentication
BookingSystem "1" *-- "1" Sessions
BookingSystem "1" *-- "1" Rooms
BookingSystem "1" *-- "1" Bookings

interface IAuthentication {
  +authenticate(user: User, pass: Password) : Boolean
  +get_users(): Users
}

IAuthentication "1" <|-- "0.." LocalAuthentication
class LocalAuthentication {
  -users: users
}
LocalAuthentication "1" o-- "1" Users

IAuthentication "1" <|-- "0.." RemoteAuthentication
class RemoteAuthentication {
  +connect(server: Host): Boolean
  +disconnect(): Boolean

  -users: users
}
RemoteAuthentication "1" o-- "1" Users

class Sessions
{
  +add(session: Session): Boolean
  +remove(Session): Boolean
  +is_valid(Session): Boolean
  
  -sessions: Session[]
}
Sessions "1" o-- "0..*" Session

class Session
{
  id: Integer
  user: User
  login: Date
}

class Users {
  +add(user: User): Boolean
  +edit(user: User): Boolean
  +remove(user: User): Boolean

  -users: User[]
}
Users "1" o-- "0..*" User

class User {
  first_name: String
  last_name: String
  email_addr: EMailAddr
  role: UserRole
}
User "1" -- "1" UserRole

enum UserRole {
  USER, ADMIN
}

class Rooms {
  +add(room: Room): Boolean
  +edit(room: Room): Boolean
  +remove(room: Room): Boolean

  +find_room(feature: Feature): Room

  -rooms : Room[]
}
Rooms "1" o-- "0..*" Room

class Room {
  -name : String
  -description : String
  -capacity : Integer
  -location : Location
  -features : Features[]
}

class Bookings {
  +add(Booking): Boolean
  +edit(Booking): Boolean
  +remove(Booking): Boolean
  
  -is_free(booking: Booking): Boolean
  -is_reserved(booking: Booking): Boolean
  -bookings: Booking[]
}
Bookings "1" o-- "0..*" Booking

class Booking {
  -id: Integer
  -user: User
  -room: Room
  -start_date: Date
  -end_date: Date
  -status: BookingStatus
}
Booking "1" -- "1" BookingStatus
Booking "1" -- "1" User
Booking "1" -- "1" Room

enum BookingStatus {
  CANCELED, RESERVED, CONFIRMED
}

@enduml
